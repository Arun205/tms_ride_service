spring.application.name=rideserver
eureka.client.service-url.defaultZone=${EUREKA_SERVER:http://localhost:8761/eureka}
spring.cloud.config.discovery.enabled=true
server.port=${RIDE_PORT:2222}

#aws dynamodb config
amazon.end-point.url=${AWS_DYNAMODB_ENDPOINT:http://localhost:8000}
amazon.access.key=${AWS_DYNAMODB_ACCESS_KEY:}
amazon.access.secret-key=${AWS_DYNAMODB_SECRET_KEY:}
amazon.region=${AWS_DYNAMODB_REGION:}

#kafka config
spring.kafka.consumer.bootstrap-servers=${KAFKA_SERVER:localhost:9092}
spring.kafka.group.id=group-id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

kafka.add-ride=addride
kafka.update-ride=updateride
kafka.group-id=group-id

#sonar config
sonar.jdbc.dialect=mysql
sonar.projectKey=com.fse2.tms:tms_ride_service
sonar.projectName=com.fse2.tms:tms_ride_service
sonar.projectVersion=1.0
sonar.sources=src
sonar.language=java
sonar.binaries=build/classes
sonar.tests=junit
sonar.dynamicAnalysis=reuseReports
sonar.junit.reportsPath=build/test-reports
sonar.java.coveragePlugin=jacoco
sonar.jacoco.reportPath=build/test-reports/jacoco.exec